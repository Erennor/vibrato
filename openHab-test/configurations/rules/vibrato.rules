import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import socket.*

import java.io.*
import java.nio.file.Path
import java.nio.file.Paths
import java.util.*
import com.google.common.io.CharStreams.*
// Used to handle request from android
/** request should be either:
 * c%id%item%itemRule -> link hit labeled by id to applying itemRule ( ON OFF SWITCH) to item
 * d%id -> delete id
 */
rule "Vibrato request"
	when
		Item VibratoListener received command
	then
		if(receivedCommand == "OFF"){
			postUpdate(Vibrato,OFF)}
		else if(receivedCommand == "ON"){
			postUpdate(Vibrato,ON)}
		else {//if(Vibrato.state == ON){
			logInfo("rule Vibrato","vibrato: command " + receivedCommand +" received")	
			val String[] cmd = receivedCommand.toString().splitByWholeSeparator("%")
			if(cmd.get(0).equals("c") || cmd.get(0).equals("d")){
				val id = cmd.get(1)			
				val lines = HitHandlerData.state.toString().splitByWholeSeparator("\n")
				var String newLines = ""
				//deleting previous version of id
				for(line : lines){
					
					if (line.splitByWholeSeparator("=").size()!= 0 && !line.splitByWholeSeparator("=").get(0).equals(id)){
						newLines = newLines + line +"\n"
					}
				}
				if(cmd.get(0).equals("c")){
					//assert that id belongs to vibratoList
					val String item = VibratoAccessibleItems.state.toString().splitByWholeSeparator("\n").findFirst(
						i | (i.splitByWholeSeparator(":").size != 0 && i.splitByWholeSeparator(":").get(0).equals(cmd.get(2))))
					if(item == null){
						logInfo("Erreur","item " + cmd.get(2) + " ne correspond pas à un item valable")
					}	
					logInfo(item,item)
					//asserting item is accessible and command is correct thanks to VibratoList
					logInfo("parsing",cmd.get(1) +" with " + item.toString())
					val String itemId = item.splitByWholeSeparator(":").get(0)
					val itemAction = item.splitByWholeSeparator(":").get(2).splitByWholeSeparator(",")
					if(!itemId.equals(cmd.get(2))){
						logInfo("Error",cmd.get(2) + "isn't an available item for vibrato applications")
					}else if(!itemAction.contains(cmd.get(3))){
						logInfo("Error",cmd.get(3) + " not an available state for item " + cmd.get(2))
					}else{
						logInfo("success","success!")
						newLines = newLines + "\n" + cmd.get(1) + "=" + cmd.get(2) + ":" + cmd.get(3)
						sendCommand("VibratoTalk","c_"+id)
					}
				}else{
					sendCommand("VibratoTalk","d_"+id)
				}
				sendCommand(writeFile,"configurations/transform/hitHandler.map|" + newLines)
			}
			else{
				logInfo("vibratoListener","Error, command "+ receivedCommand + "not recognized")
			}
			//sendCommand("VibratoTalk",receivedCommand.toString())
		}
		else
			logInfo("rule vibrato","vibrato: command " + receivedCommand +" received but not treated: Vibrato off")	
end
// log info
rule "Vibrato status updater"
	when 
		Item Vibrato received command
	then
		logInfo("rule vibrato","vibrato a reçu " + receivedCommand)
end

//used to handle hit received by vibrato
//transformation file should be somethi ng like [ITEM:[ON|OFF|SWITCH|OTHERS]]*
rule "hit treatment"
	when 
		Item scriptListener received command
	then
	 	logInfo("scriptListener","scriptListener a recu une commande " + receivedCommand)

		var String cmd = transform("MAP","hitHandler.map",receivedCommand.toString())
		var String cmdStateRule = cmd.splitByWholeSeparator(":").get(1) 
		val String cmdItem = cmd.splitByWholeSeparator(":").get(0) 
		logInfo("scriptListener","commande traduite en tant que " + cmdStateRule + " -> " + cmdItem)
		switch(cmdStateRule){
			case "SWITCH": {
				val item = All.allMembers.findFirst(i | cmdItem.equals(i.name))
				switch(item.state){
					case ON:{
						sendCommand(cmdItem,"OFF")
					}
					case OFF:{
						sendCommand(cmdItem,"ON")
					}
					default :{
						logInfo("scriptListener","Erreur, switch appliqué à un item non-switch")
					}
				}
			}
			default: {
				sendCommand(cmdItem,cmdStateRule)
			}
		}
end

rule "keep hitHandlerData up to date" 
	when
		 System started or
		 Item askUpdate received command	 
	then
		var reader = new BufferedReader(new FileReader("configurations/transform/hitHandler.map"))
		var String currentLine = reader.readLine()
		var String lines = ""
		while(currentLine != null){
			//remove precedent occurence of id 
			lines = lines + currentLine + "\n"
			currentLine = reader.readLine()
		}
		reader.close()
		postUpdate(HitHandlerData,lines)
		
		reader = new BufferedReader(new FileReader("configurations/items/vibratoList"))
		currentLine = reader.readLine()
		lines = ""
		while(currentLine != null){
			//remove precedent occurence of id
			lines = lines + currentLine + "\n"
			currentLine = reader.readLine()
		}
		reader.close()
		postUpdate(VibratoAccessibleItems,lines)
end	 
	/**	 
rule " file reader"
	when 
		Item readFile received command
	then
		val reader = new BufferedReader(new FileReader(receivedCommand.toString))
		var String currentLine = reader.readLine()
		var String lines = ""
		while(currentLine != null){
			//remove precedent occurence of id
			lines = lines + currentLine + "\n"
			currentLine = reader.readLine()
		}
		reader.close()
		postUpdate(readFile,lines)
end **/

rule " file writer"
	when 
		Item writeFile received command
	then
		val parsedCmd = receivedCommand.toString.splitByWholeSeparator("|")
		logInfo("args",parsedCmd.get(0) + " and " + parsedCmd.get(1))
		val lines = parsedCmd.get(1).splitByWholeSeparator("\n")
		val writer = new BufferedWriter(new FileWriter(parsedCmd.get(0)))
		for(line : lines){
			logInfo("lolllll", line)
			writer.write(line + "\n")
		}
		writer.close()
		sendCommand(askUpdate,"toto")
end















